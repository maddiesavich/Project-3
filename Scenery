// This class contains the methods needed to draw onto the canvas

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.geom.Line2D;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class Scenery<ComboBox> extends JComponent implements ActionListener, ItemListener {

	// Initialize
	JPanel panel = new JPanel();
	protected Graphics g;
	Color NAVY = new Color(0, 25, 175);
	protected String color = "Blue";
	protected String shape = "Rectangle";
	protected JButton launch;
	protected JTextField speedInput, angleInput, timeInput;
	protected double speed, angle, time;
	protected JLabel speedLabel, angleLabel, timeLabel, shapeLabel, colorLabel;
	protected int yOne, xOne;
	protected int height = getHeight();
	protected int width = getWidth();
	// int [] radius = {118, 40, 90, 40};
	// starX[i] = new int[nPoints];
	// starY[i] = new int[nPoints];
	//
	// Arrays to store the shapes and colors of the fireworks
	String[] shapeArray = { "Square", "Diamond", "Triangle", "Star", "Heart" };
	String[] colorArray = { "Red", "Orange", "Yellow", "Green", "Blue", "Magenta" };

	// Create combo boxes for color and shape
	JComboBox shapeList = new JComboBox(shapeArray);
	JComboBox colorList = new JComboBox(colorArray);

	public Scenery() {

		// Set Layout
		setLayout(new FlowLayout(FlowLayout.LEFT));

		// Add and intialize everything
		speedLabel = new JLabel("Enter speed (m/s): ");
		add(speedLabel);
		speedInput = new JTextField(3);
		add(speedInput);
		angleLabel = new JLabel("Enter angle (degrees): ");
		add(angleLabel);
		angleInput = new JTextField(3);
		add(angleInput);
		timeLabel = new JLabel("Enter time (seconds): ");
		add(timeLabel);
		timeInput = new JTextField(3);
		add(timeInput);
		add(shapeList);
		add(colorList);

		// Set the index and labels
		shapeLabel = new JLabel("Shape");
		add(shapeLabel);
		shapeList.setSelectedIndex(4);
		colorLabel = new JLabel("Color");
		add(colorLabel);
		colorList.setSelectedIndex(5);
		// Add the item listener
		shapeList.addItemListener(this);
		colorList.addItemListener(this);

		// Create new buttons for user input
		launch = new JButton("Launch!");
		launch.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				Graphics g = getGraphics();
				speed = Double.parseDouble(speedInput.getText());
				angle = Double.parseDouble(angleInput.getText());
				time = Double.parseDouble(timeInput.getText());
				drawPath(g);
				drawFirework(g);
			}
		});
		add(launch);
	}

	// Paint Component
	@Override
	public void paintComponent(Graphics g) {
		int width = getWidth();
		int height = getHeight();
		g.setColor(NAVY);
		g.fillRect(0, 0, width, height);
		g.setColor(Color.GREEN);
		g.fillRect(0, 7 * height / 8, width, height);
		g.setColor(Color.YELLOW);
		g.fillOval(780, 100, 50, 50);
		g.setColor(NAVY);
		g.fillOval(765, 100, 45, 45);
		drawPath(g);
		drawFirework(g);
	}

	// Method to draw path of the firework with fillOval
	public void drawPath(Graphics g) {
		g.setColor(Color.BLACK);
		for (int i = 0; i < time; i++) { // 0.1
			int xOne = (int) (speed * ((Math.cos(Math.toRadians(angle))) * i));
			int yOne = (int) (700 - (speed * ((Math.sin(Math.toRadians(angle)))) * i - (0.5 * (9.8)) * i * i));
			g.fillOval(xOne, yOne, 7, 7);
			System.out.println("x: " + xOne + ", y: " + yOne);
		}

		System.out.println("x " + xOne);
		System.out.println("y " + yOne);

	}

	// Method to draw the type of firework
	public void drawFirework(Graphics g) {
		System.out.println("angle: " + angle + ", speed: " + speed + ", time: " + time);
		int xTwo = (int) ((speed) * (Math.cos(Math.toRadians(angle))) * time);
		int yTwo = (int) (((speed * (Math.sin(Math.toRadians(angle)))) * time - (0.5 * (9.8)) * time * time));
		System.out.println(xTwo);
		System.out.println(yTwo);

		if (shape == "Square") {
			if (color.equals("Red")) {
				g.setColor(Color.RED);
			} else if (color.equals("Orange")) {
				g.setColor(Color.ORANGE);
			} else if (color.equals("Yellow")) {
				g.setColor(Color.YELLOW);
			} else if (color.equals("Green")) {
				g.setColor(Color.GREEN);
			} else if (color.equals("Blue")) {
				g.setColor(Color.BLUE);
			} else if (color.equals("Magenta")) {
				g.setColor(Color.MAGENTA);
			}
			g.drawRect(xTwo - 25, yTwo - 25, 50, 50);
			//g.drawLine(xTwo, 1000-yTwo, (int) (xTwo + 50*Math.cos(i)), (int) (1000 - yTwo + 50*Math.sin(i)));
		}

		if (shape == "Diamond") {
			if (color.equals("Red")) {
				g.setColor(Color.RED);
			} else if (color.equals("Orange")) {
				g.setColor(Color.ORANGE);
			} else if (color.equals("Yellow")) {
				g.setColor(Color.YELLOW);
			} else if (color.equals("Green")) {
				g.setColor(Color.GREEN);
			} else if (color.equals("Blue")) {
				g.setColor(Color.BLUE);
			} else if (color.equals("Magenta")) {
				g.setColor(Color.MAGENTA);
			}
			g.drawRect(xOne, yOne, 50, 50);
		}
		if (shape == "Triangle") {
			if (color.equals("Red")) {
				g.setColor(Color.RED);
			} else if (color.equals("Orange")) {
				g.setColor(Color.ORANGE);
			} else if (color.equals("Yellow")) {
				g.setColor(Color.YELLOW);
			} else if (color.equals("Green")) {
				g.setColor(Color.GREEN);
			} else if (color.equals("Blue")) {
				g.setColor(Color.BLUE);
			} else if (color.equals("Magenta")) {
				g.setColor(Color.MAGENTA);
			}
			g.drawRect(xOne, yOne, 50, 50);
		}
		if (shape == "Star") {
			if (color.equals("Red")) {
				g.setColor(Color.RED);
			} else if (color.equals("Orange")) {
				g.setColor(Color.ORANGE);
			} else if (color.equals("Yellow")) {
				g.setColor(Color.YELLOW);
			} else if (color.equals("Green")) {
				g.setColor(Color.GREEN);
			} else if (color.equals("Blue")) {
				g.setColor(Color.BLUE);
			} else if (color.equals("Magenta")) {
				g.setColor(Color.MAGENTA);
			}
			g.drawRect(xOne, yOne, 50, 50);
		}

		if (shape == "Heart") {
			if (color.equals("Red")) {
				g.setColor(Color.RED);
			} else if (color.equals("Orange")) {
				g.setColor(Color.ORANGE);
			} else if (color.equals("Yellow")) {
				g.setColor(Color.YELLOW);
			} else if (color.equals("Green")) {
				g.setColor(Color.GREEN);
			} else if (color.equals("Blue")) {
				g.setColor(Color.BLUE);
			} else if (color.equals("Magenta")) {
				g.setColor(Color.MAGENTA);
			}
			g.drawRect(xOne, yOne, 50, 50);
		}

	}

	private void drawStar() {

		// We want the center coordinates of the explosion
		// last of the path
		int midX = xOne;
		int midY = yOne;
		int radius[] = { 118, 40, 90, 40 }; // I think we need to change this? Unsure?
		int nPoints = 16;
		int[] X = new int[nPoints];
		int[] Y = new int[nPoints];

		for (double current = 0; current < nPoints; current++) {
			int i = (int) current;
			double x = Math.cos(current * ((2 * Math.PI) / midX)) * radius[i % 4];
			double y = Math.sin(current * ((2 * Math.PI) / midY)) * radius[i % 4];

			X[i] = (int) x + midX;
			Y[i] = (int) y + midY;
		}

		g.setColor(Color.WHITE);
		g.fillPolygon(X, Y, nPoints);
		// for (double i = 0.0; i <= 5; i++) {
		// int n = (int) i;
		// double xStar = Math.cos(i * ((2 * Math.PI) / 10)) * radius[n % 4];
		// double yStar = Math.sin(i * ((2 * Math.PI) / 10)) * radius[n % 4];
		// starX[i] = (int) xOne + 500;
		// starY[i] = (int) yOne + 500;
		// g.fillPolygon(starX, starY, 5);
		// }
		// starX[i] = (int) xOne + 500;
		// starY[i] = (int) yOne + 500;
		// g.fillPolygon(starX, starY, 5);

	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// System.out.println("Action Performed");

	}

	// Listener for the combo box
	@Override
	public void itemStateChanged(ItemEvent e) {
		if ((e.getSource()).equals(colorList)) {
			color = (String) colorList.getSelectedItem();
			System.out.println("color" + color);
		}
		if ((e.getSource()).equals(shapeList)) {
			shape = (String) shapeList.getSelectedItem();

		}

	}

}
